name: Run setup

on:
  repository_dispatch:
    types: [ run_setup ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
        with:
          ref: ${{ github.event.client_payload.ref || 'main' }}
      - run: 'echo "field: ${{ github.event.client_payload.admin_version }}"'
      - run: 'echo "client_payload: ${{ toJson(github.event.client_payload) }}"'

      - name: Declare branch variable variables
        id: gh_vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - uses: actions/setup-node@v2
        with:
          node-version: '12'
      - run: npm install

      - name: Run setup
        id: run_setup
        env:
          REPORT_PORTAL_TOKEN: ${{ secrets.REPORT_PORTAL_TOKEN }}
        uses: "./.github/run-setup"

      - name: Archive cypress videos results
        uses: actions/upload-artifact@v2
        with:
          name: cypress-videos
          path: cypress/videos

      - name: Archive cypress screenshots results
        uses: actions/upload-artifact@v2
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      - name: Archive admin logs
        uses: actions/upload-artifact@v2
        with:
          name: admin-logs
          path: ./admin-logs
      - name: Archive petclinic autotests log
        uses: actions/upload-artifact@v2
        with:
          name: autotests-logs
          path: ./autotests-log
      - name: Archive cypress log
        uses: actions/upload-artifact@v2
        with:
          name: cypress-logs
          path: ./cypress-log

      - uses: Drill4J/vee-table@0.0.0
        with:
          # leave everything "as-is"
          github-access-token: ${{ secrets.VEE_TABLE_TOKEN }}
          action-type: 'add-test-result'
          ledger-repo-url: 'https://github.com/Drill4J/vee-ledger'
          ledger-repo-owner: 'Drill4J'
          ledger-repo-name: 'vee-ledger'
          test-setup-id: ${{ steps.run_setup.outputs.setupId }}
          # leave everything "as-is"

          # steps.run_setup is your test step name (defined above)
          test-status: ${{ steps.run_setup.outputs.status }} # 1. Pass test status (any string)
          test-component-version-map: ${{ steps.run_setup.outputs.versions }}
          released-component: ${{ steps.run_setup.outputs.releasedComponent }}
          initiator: ${{ steps.run_setup.outputs.initiator }}
          link-to-run: ${{ steps.run_setup.outputs.linkToRun }}
          test-params: ${{ steps.run_setup.outputs.testParams }}
          test-description: 'Branch name: ${{ steps.gh_vars.outputs.branch }}, Commit hash: ${{ steps.gh_vars.outputs.sha_short }}'
      - name: Handle tests status
        id: handle_status
        uses: "./.github/handle-status"
        with:
          tests_status: '${{ steps.run_setup.outputs.status }}'
